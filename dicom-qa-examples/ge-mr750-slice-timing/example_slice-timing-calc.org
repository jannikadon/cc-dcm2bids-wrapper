#+TITLE: Example slice time estimation

* SLICE TIMING
** Example calc

   #+BEGIN_SRC ipython :session *iPython* :results raw drawer :exports both :shebang "#!/usr/bin/env ipython\n# -*- coding: utf-8 -*-" :tangle yes

import numpy as np
import pandas as pd

t0 = 0
TR = 2
ns = 44 # number of slices

st = np.linspace(t0, TR, ns, endpoint=False, retstep=False, dtype=None, )
mi = (st[1]-st[0])/2
df = pd.DataFrame({'orig':st})
df['orig_diff'] = df['orig'].diff()
df['orig_cumsum'] = df['orig_diff'].cumsum()

df['mid'] = df['orig'] + mi

df['mid_diff'] = df['mid'].diff()
df['mid_cumsum_w_mid'] = df['mid_diff'].cumsum() + mi


# print(df.describe())
print(df)


   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[52]:
   # output
   :         orig  orig_diff  orig_cumsum       mid  mid_diff  mid_cumsum_w_mid
   : 0   0.000000        NaN          NaN  0.022727       NaN               NaN
   : 1   0.045455   0.045455     0.045455  0.068182  0.045455          0.068182
   : 2   0.090909   0.045455     0.090909  0.113636  0.045455          0.113636
   : 3   0.136364   0.045455     0.136364  0.159091  0.045455          0.159091
   : 4   0.181818   0.045455     0.181818  0.204545  0.045455          0.204545
   : 5   0.227273   0.045455     0.227273  0.250000  0.045455          0.250000
   : 6   0.272727   0.045455     0.272727  0.295455  0.045455          0.295455
   : 7   0.318182   0.045455     0.318182  0.340909  0.045455          0.340909
   : 8   0.363636   0.045455     0.363636  0.386364  0.045455          0.386364
   : 9   0.409091   0.045455     0.409091  0.431818  0.045455          0.431818
   : 10  0.454545   0.045455     0.454545  0.477273  0.045455          0.477273
   : 11  0.500000   0.045455     0.500000  0.522727  0.045455          0.522727
   : 12  0.545455   0.045455     0.545455  0.568182  0.045455          0.568182
   : 13  0.590909   0.045455     0.590909  0.613636  0.045455          0.613636
   : 14  0.636364   0.045455     0.636364  0.659091  0.045455          0.659091
   : 15  0.681818   0.045455     0.681818  0.704545  0.045455          0.704545
   : 16  0.727273   0.045455     0.727273  0.750000  0.045455          0.750000
   : 17  0.772727   0.045455     0.772727  0.795455  0.045455          0.795455
   : 18  0.818182   0.045455     0.818182  0.840909  0.045455          0.840909
   : 19  0.863636   0.045455     0.863636  0.886364  0.045455          0.886364
   : 20  0.909091   0.045455     0.909091  0.931818  0.045455          0.931818
   : 21  0.954545   0.045455     0.954545  0.977273  0.045455          0.977273
   : 22  1.000000   0.045455     1.000000  1.022727  0.045455          1.022727
   : 23  1.045455   0.045455     1.045455  1.068182  0.045455          1.068182
   : 24  1.090909   0.045455     1.090909  1.113636  0.045455          1.113636
   : 25  1.136364   0.045455     1.136364  1.159091  0.045455          1.159091
   : 26  1.181818   0.045455     1.181818  1.204545  0.045455          1.204545
   : 27  1.227273   0.045455     1.227273  1.250000  0.045455          1.250000
   : 28  1.272727   0.045455     1.272727  1.295455  0.045455          1.295455
   : 29  1.318182   0.045455     1.318182  1.340909  0.045455          1.340909
   : 30  1.363636   0.045455     1.363636  1.386364  0.045455          1.386364
   : 31  1.409091   0.045455     1.409091  1.431818  0.045455          1.431818
   : 32  1.454545   0.045455     1.454545  1.477273  0.045455          1.477273
   : 33  1.500000   0.045455     1.500000  1.522727  0.045455          1.522727
   : 34  1.545455   0.045455     1.545455  1.568182  0.045455          1.568182
   : 35  1.590909   0.045455     1.590909  1.613636  0.045455          1.613636
   : 36  1.636364   0.045455     1.636364  1.659091  0.045455          1.659091
   : 37  1.681818   0.045455     1.681818  1.704545  0.045455          1.704545
   : 38  1.727273   0.045455     1.727273  1.750000  0.045455          1.750000
   : 39  1.772727   0.045455     1.772727  1.795455  0.045455          1.795455
   : 40  1.818182   0.045455     1.818182  1.840909  0.045455          1.840909
   : 41  1.863636   0.045455     1.863636  1.886364  0.045455          1.886364
   : 42  1.909091   0.045455     1.909091  1.931818  0.045455          1.931818
   : 43  1.954545   0.045455     1.954545  1.977273  0.045455          1.977273
   :
   :END:

** Example =ORIG=

   #+BEGIN_SRC ipython :session *iPython* :results raw drawer :exports both :shebang "#!/usr/bin/env ipython\n# -*- coding: utf-8 -*-" :tangle yes


print(df['orig'])


   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[53]:
   # output
   : 0     0.000000
   : 1     0.045455
   : 2     0.090909
   : 3     0.136364
   : 4     0.181818
   : 5     0.227273
   : 6     0.272727
   : 7     0.318182
   : 8     0.363636
   : 9     0.409091
   : 10    0.454545
   : 11    0.500000
   : 12    0.545455
   : 13    0.590909
   : 14    0.636364
   : 15    0.681818
   : 16    0.727273
   : 17    0.772727
   : 18    0.818182
   : 19    0.863636
   : 20    0.909091
   : 21    0.954545
   : 22    1.000000
   : 23    1.045455
   : 24    1.090909
   : 25    1.136364
   : 26    1.181818
   : 27    1.227273
   : 28    1.272727
   : 29    1.318182
   : 30    1.363636
   : 31    1.409091
   : 32    1.454545
   : 33    1.500000
   : 34    1.545455
   : 35    1.590909
   : 36    1.636364
   : 37    1.681818
   : 38    1.727273
   : 39    1.772727
   : 40    1.818182
   : 41    1.863636
   : 42    1.909091
   : 43    1.954545
   : Name: orig, dtype: float64
   :
   :END:

** Example =MID=

   #+BEGIN_SRC ipython :session *iPython* :results raw drawer :exports both :shebang "#!/usr/bin/env ipython\n# -*- coding: utf-8 -*-" :tangle yes


print(df['mid'])


   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[54]:
   # output
   : 0     0.022727
   : 1     0.068182
   : 2     0.113636
   : 3     0.159091
   : 4     0.204545
   : 5     0.250000
   : 6     0.295455
   : 7     0.340909
   : 8     0.386364
   : 9     0.431818
   : 10    0.477273
   : 11    0.522727
   : 12    0.568182
   : 13    0.613636
   : 14    0.659091
   : 15    0.704545
   : 16    0.750000
   : 17    0.795455
   : 18    0.840909
   : 19    0.886364
   : 20    0.931818
   : 21    0.977273
   : 22    1.022727
   : 23    1.068182
   : 24    1.113636
   : 25    1.159091
   : 26    1.204545
   : 27    1.250000
   : 28    1.295455
   : 29    1.340909
   : 30    1.386364
   : 31    1.431818
   : 32    1.477273
   : 33    1.522727
   : 34    1.568182
   : 35    1.613636
   : 36    1.659091
   : 37    1.704545
   : 38    1.750000
   : 39    1.795455
   : 40    1.840909
   : 41    1.886364
   : 42    1.931818
   : 43    1.977273
   : Name: mid, dtype: float64
   :
   :END:
